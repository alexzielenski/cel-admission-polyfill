/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/alexzielenski/cel_polyfill/pkg/apis/celadmissionpolyfill.k8s.io/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ValidationRuleSetLister helps list ValidationRuleSets.
// All objects returned here must be treated as read-only.
type ValidationRuleSetLister interface {
	// List lists all ValidationRuleSets in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ValidationRuleSet, err error)
	// ValidationRuleSets returns an object that can list and get ValidationRuleSets.
	ValidationRuleSets(namespace string) ValidationRuleSetNamespaceLister
	ValidationRuleSetListerExpansion
}

// validationRuleSetLister implements the ValidationRuleSetLister interface.
type validationRuleSetLister struct {
	indexer cache.Indexer
}

// NewValidationRuleSetLister returns a new ValidationRuleSetLister.
func NewValidationRuleSetLister(indexer cache.Indexer) ValidationRuleSetLister {
	return &validationRuleSetLister{indexer: indexer}
}

// List lists all ValidationRuleSets in the indexer.
func (s *validationRuleSetLister) List(selector labels.Selector) (ret []*v1alpha1.ValidationRuleSet, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ValidationRuleSet))
	})
	return ret, err
}

// ValidationRuleSets returns an object that can list and get ValidationRuleSets.
func (s *validationRuleSetLister) ValidationRuleSets(namespace string) ValidationRuleSetNamespaceLister {
	return validationRuleSetNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ValidationRuleSetNamespaceLister helps list and get ValidationRuleSets.
// All objects returned here must be treated as read-only.
type ValidationRuleSetNamespaceLister interface {
	// List lists all ValidationRuleSets in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ValidationRuleSet, err error)
	// Get retrieves the ValidationRuleSet from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ValidationRuleSet, error)
	ValidationRuleSetNamespaceListerExpansion
}

// validationRuleSetNamespaceLister implements the ValidationRuleSetNamespaceLister
// interface.
type validationRuleSetNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ValidationRuleSets in the indexer for a given namespace.
func (s validationRuleSetNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ValidationRuleSet, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ValidationRuleSet))
	})
	return ret, err
}

// Get retrieves the ValidationRuleSet from the indexer for a given namespace and name.
func (s validationRuleSetNamespaceLister) Get(name string) (*v1alpha1.ValidationRuleSet, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("validationruleset"), name)
	}
	return obj.(*v1alpha1.ValidationRuleSet), nil
}
