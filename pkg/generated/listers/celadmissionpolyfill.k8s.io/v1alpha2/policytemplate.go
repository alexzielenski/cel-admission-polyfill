/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha2

import (
	v1alpha2 "github.com/alexzielenski/cel_polyfill/pkg/apis/celadmissionpolyfill.k8s.io/v1alpha2"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// PolicyTemplateLister helps list PolicyTemplates.
// All objects returned here must be treated as read-only.
type PolicyTemplateLister interface {
	// List lists all PolicyTemplates in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha2.PolicyTemplate, err error)
	// PolicyTemplates returns an object that can list and get PolicyTemplates.
	PolicyTemplates(namespace string) PolicyTemplateNamespaceLister
	PolicyTemplateListerExpansion
}

// policyTemplateLister implements the PolicyTemplateLister interface.
type policyTemplateLister struct {
	indexer cache.Indexer
}

// NewPolicyTemplateLister returns a new PolicyTemplateLister.
func NewPolicyTemplateLister(indexer cache.Indexer) PolicyTemplateLister {
	return &policyTemplateLister{indexer: indexer}
}

// List lists all PolicyTemplates in the indexer.
func (s *policyTemplateLister) List(selector labels.Selector) (ret []*v1alpha2.PolicyTemplate, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha2.PolicyTemplate))
	})
	return ret, err
}

// PolicyTemplates returns an object that can list and get PolicyTemplates.
func (s *policyTemplateLister) PolicyTemplates(namespace string) PolicyTemplateNamespaceLister {
	return policyTemplateNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// PolicyTemplateNamespaceLister helps list and get PolicyTemplates.
// All objects returned here must be treated as read-only.
type PolicyTemplateNamespaceLister interface {
	// List lists all PolicyTemplates in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha2.PolicyTemplate, err error)
	// Get retrieves the PolicyTemplate from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha2.PolicyTemplate, error)
	PolicyTemplateNamespaceListerExpansion
}

// policyTemplateNamespaceLister implements the PolicyTemplateNamespaceLister
// interface.
type policyTemplateNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all PolicyTemplates in the indexer for a given namespace.
func (s policyTemplateNamespaceLister) List(selector labels.Selector) (ret []*v1alpha2.PolicyTemplate, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha2.PolicyTemplate))
	})
	return ret, err
}

// Get retrieves the PolicyTemplate from the indexer for a given namespace and name.
func (s policyTemplateNamespaceLister) Get(name string) (*v1alpha2.PolicyTemplate, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha2.Resource("policytemplate"), name)
	}
	return obj.(*v1alpha2.PolicyTemplate), nil
}
