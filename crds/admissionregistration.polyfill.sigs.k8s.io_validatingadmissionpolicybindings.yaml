---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    api-approved.kubernetes.io: unapproved, request not yet submitted
    controller-gen.kubebuilder.io/version: v0.11.3
  creationTimestamp: null
  name: validatingadmissionpolicybindings.admissionregistration.polyfill.sigs.k8s.io
spec:
  group: admissionregistration.polyfill.sigs.k8s.io
  names:
    kind: ValidatingAdmissionPolicyBinding
    listKind: ValidatingAdmissionPolicyBindingList
    plural: validatingadmissionpolicybindings
    singular: validatingadmissionpolicybinding
  scope: Cluster
  versions:
  - name: v1alpha1
    schema:
      openAPIV3Schema:
        description: ValidatingAdmissionPolicyBinding binds the ValidatingAdmissionPolicy
          with paramerized resources. ValidatingAdmissionPolicyBinding and parameter
          CRDs together define how cluster administrators configure policies for clusters.
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: Specification of the desired behavior of the ValidatingAdmissionPolicyBinding.
            properties:
              matchResources:
                description: MatchResources declares what resources match this binding
                  and will be validated by it. Note that this is intersected with
                  the policy's matchConstraints, so only requests that are matched
                  by the policy can be selected by this. If this is unset, all resources
                  matched by the policy are validated by this binding When resourceRules
                  is unset, it does not constrain resource matching. If a resource
                  is matched by the other fields of this object, it will be validated.
                  Note that this is differs from ValidatingAdmissionPolicy matchConstraints,
                  where resourceRules are required.
                properties:
                  excludeResourceRules:
                    description: ExcludeResourceRules describes what operations on
                      what resources/subresources the ValidatingAdmissionPolicy should
                      not care about. The exclude rules take precedence over include
                      rules (if a resource matches both, it is excluded)
                    items:
                      description: NamedRuleWithOperations is a tuple of Operations
                        and Resources with ResourceNames.
                      properties:
                        apiGroups:
                          description: APIGroups is the API groups the resources belong
                            to. '*' is all groups. If '*' is present, the length of
                            the slice must be one. Required.
                          items:
                            type: string
                          type: array
                          x-kubernetes-list-type: atomic
                        apiVersions:
                          description: APIVersions is the API versions the resources
                            belong to. '*' is all versions. If '*' is present, the
                            length of the slice must be one. Required.
                          items:
                            type: string
                          type: array
                          x-kubernetes-list-type: atomic
                        operations:
                          description: Operations is the operations the admission
                            hook cares about - CREATE, UPDATE, DELETE, CONNECT or
                            * for all of those operations and any future admission
                            operations that are added. If '*' is present, the length
                            of the slice must be one. Required.
                          items:
                            description: OperationType specifies an operation for
                              a request.
                            type: string
                          type: array
                          x-kubernetes-list-type: atomic
                        resourceNames:
                          description: ResourceNames is an optional white list of
                            names that the rule applies to.  An empty set means that
                            everything is allowed.
                          items:
                            type: string
                          type: array
                          x-kubernetes-list-type: atomic
                        resources:
                          description: "Resources is a list of resources this rule
                            applies to. \n For example: 'pods' means pods. 'pods/log'
                            means the log subresource of pods. '*' means all resources,
                            but not subresources. 'pods/*' means all subresources
                            of pods. '*/scale' means all scale subresources. '*/*'
                            means all resources and their subresources. \n If wildcard
                            is present, the validation rule will ensure resources
                            do not overlap with each other. \n Depending on the enclosing
                            object, subresources might not be allowed. Required."
                          items:
                            type: string
                          type: array
                          x-kubernetes-list-type: atomic
                        scope:
                          description: scope specifies the scope of this rule. Valid
                            values are "Cluster", "Namespaced", and "*" "Cluster"
                            means that only cluster-scoped resources will match this
                            rule. Namespace API objects are cluster-scoped. "Namespaced"
                            means that only namespaced resources will match this rule.
                            "*" means that there are no scope restrictions. Subresources
                            match the scope of their parent resource. Default is "*".
                          type: string
                      type: object
                      x-kubernetes-map-type: atomic
                    type: array
                    x-kubernetes-list-type: atomic
                  matchPolicy:
                    description: "matchPolicy defines how the \"MatchResources\" list
                      is used to match incoming requests. Allowed values are \"Exact\"
                      or \"Equivalent\". \n - Exact: match a request only if it exactly
                      matches a specified rule. For example, if deployments can be
                      modified via apps/v1, apps/v1beta1, and extensions/v1beta1,
                      but \"rules\" only included `apiGroups:[\"apps\"], apiVersions:[\"v1\"],
                      resources: [\"deployments\"]`, a request to apps/v1beta1 or
                      extensions/v1beta1 would not be sent to the ValidatingAdmissionPolicy.
                      \n - Equivalent: match a request if modifies a resource listed
                      in rules, even via another API group or version. For example,
                      if deployments can be modified via apps/v1, apps/v1beta1, and
                      extensions/v1beta1, and \"rules\" only included `apiGroups:[\"apps\"],
                      apiVersions:[\"v1\"], resources: [\"deployments\"]`, a request
                      to apps/v1beta1 or extensions/v1beta1 would be converted to
                      apps/v1 and sent to the ValidatingAdmissionPolicy. \n Defaults
                      to \"Equivalent\""
                    type: string
                  namespaceSelector:
                    description: "NamespaceSelector decides whether to run the admission
                      control policy on an object based on whether the namespace for
                      that object matches the selector. If the object itself is a
                      namespace, the matching is performed on object.metadata.labels.
                      If the object is another cluster scoped resource, it never skips
                      the policy. \n For example, to run the webhook on any objects
                      whose namespace is not associated with \"runlevel\" of \"0\"
                      or \"1\";  you will set the selector as follows: \"namespaceSelector\":
                      { \"matchExpressions\": [ { \"key\": \"runlevel\", \"operator\":
                      \"NotIn\", \"values\": [ \"0\", \"1\" ] } ] } \n If instead
                      you want to only run the policy on any objects whose namespace
                      is associated with the \"environment\" of \"prod\" or \"staging\";
                      you will set the selector as follows: \"namespaceSelector\":
                      { \"matchExpressions\": [ { \"key\": \"environment\", \"operator\":
                      \"In\", \"values\": [ \"prod\", \"staging\" ] } ] } \n See https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
                      for more examples of label selectors. \n Default to the empty
                      LabelSelector, which matches everything."
                    properties:
                      matchExpressions:
                        description: matchExpressions is a list of label selector
                          requirements. The requirements are ANDed.
                        items:
                          description: A label selector requirement is a selector
                            that contains values, a key, and an operator that relates
                            the key and values.
                          properties:
                            key:
                              description: key is the label key that the selector
                                applies to.
                              type: string
                            operator:
                              description: operator represents a key's relationship
                                to a set of values. Valid operators are In, NotIn,
                                Exists and DoesNotExist.
                              type: string
                            values:
                              description: values is an array of string values. If
                                the operator is In or NotIn, the values array must
                                be non-empty. If the operator is Exists or DoesNotExist,
                                the values array must be empty. This array is replaced
                                during a strategic merge patch.
                              items:
                                type: string
                              type: array
                          required:
                          - key
                          - operator
                          type: object
                        type: array
                      matchLabels:
                        additionalProperties:
                          type: string
                        description: matchLabels is a map of {key,value} pairs. A
                          single {key,value} in the matchLabels map is equivalent
                          to an element of matchExpressions, whose key field is "key",
                          the operator is "In", and the values array contains only
                          "value". The requirements are ANDed.
                        type: object
                    type: object
                    x-kubernetes-map-type: atomic
                  objectSelector:
                    description: ObjectSelector decides whether to run the validation
                      based on if the object has matching labels. objectSelector is
                      evaluated against both the oldObject and newObject that would
                      be sent to the cel validation, and is considered to match if
                      either object matches the selector. A null object (oldObject
                      in the case of create, or newObject in the case of delete) or
                      an object that cannot have labels (like a DeploymentRollback
                      or a PodProxyOptions object) is not considered to match. Use
                      the object selector only if the webhook is opt-in, because end
                      users may skip the admission webhook by setting the labels.
                      Default to the empty LabelSelector, which matches everything.
                    properties:
                      matchExpressions:
                        description: matchExpressions is a list of label selector
                          requirements. The requirements are ANDed.
                        items:
                          description: A label selector requirement is a selector
                            that contains values, a key, and an operator that relates
                            the key and values.
                          properties:
                            key:
                              description: key is the label key that the selector
                                applies to.
                              type: string
                            operator:
                              description: operator represents a key's relationship
                                to a set of values. Valid operators are In, NotIn,
                                Exists and DoesNotExist.
                              type: string
                            values:
                              description: values is an array of string values. If
                                the operator is In or NotIn, the values array must
                                be non-empty. If the operator is Exists or DoesNotExist,
                                the values array must be empty. This array is replaced
                                during a strategic merge patch.
                              items:
                                type: string
                              type: array
                          required:
                          - key
                          - operator
                          type: object
                        type: array
                      matchLabels:
                        additionalProperties:
                          type: string
                        description: matchLabels is a map of {key,value} pairs. A
                          single {key,value} in the matchLabels map is equivalent
                          to an element of matchExpressions, whose key field is "key",
                          the operator is "In", and the values array contains only
                          "value". The requirements are ANDed.
                        type: object
                    type: object
                    x-kubernetes-map-type: atomic
                  resourceRules:
                    description: ResourceRules describes what operations on what resources/subresources
                      the ValidatingAdmissionPolicy matches. The policy cares about
                      an operation if it matches _any_ Rule.
                    items:
                      description: NamedRuleWithOperations is a tuple of Operations
                        and Resources with ResourceNames.
                      properties:
                        apiGroups:
                          description: APIGroups is the API groups the resources belong
                            to. '*' is all groups. If '*' is present, the length of
                            the slice must be one. Required.
                          items:
                            type: string
                          type: array
                          x-kubernetes-list-type: atomic
                        apiVersions:
                          description: APIVersions is the API versions the resources
                            belong to. '*' is all versions. If '*' is present, the
                            length of the slice must be one. Required.
                          items:
                            type: string
                          type: array
                          x-kubernetes-list-type: atomic
                        operations:
                          description: Operations is the operations the admission
                            hook cares about - CREATE, UPDATE, DELETE, CONNECT or
                            * for all of those operations and any future admission
                            operations that are added. If '*' is present, the length
                            of the slice must be one. Required.
                          items:
                            description: OperationType specifies an operation for
                              a request.
                            type: string
                          type: array
                          x-kubernetes-list-type: atomic
                        resourceNames:
                          description: ResourceNames is an optional white list of
                            names that the rule applies to.  An empty set means that
                            everything is allowed.
                          items:
                            type: string
                          type: array
                          x-kubernetes-list-type: atomic
                        resources:
                          description: "Resources is a list of resources this rule
                            applies to. \n For example: 'pods' means pods. 'pods/log'
                            means the log subresource of pods. '*' means all resources,
                            but not subresources. 'pods/*' means all subresources
                            of pods. '*/scale' means all scale subresources. '*/*'
                            means all resources and their subresources. \n If wildcard
                            is present, the validation rule will ensure resources
                            do not overlap with each other. \n Depending on the enclosing
                            object, subresources might not be allowed. Required."
                          items:
                            type: string
                          type: array
                          x-kubernetes-list-type: atomic
                        scope:
                          description: scope specifies the scope of this rule. Valid
                            values are "Cluster", "Namespaced", and "*" "Cluster"
                            means that only cluster-scoped resources will match this
                            rule. Namespace API objects are cluster-scoped. "Namespaced"
                            means that only namespaced resources will match this rule.
                            "*" means that there are no scope restrictions. Subresources
                            match the scope of their parent resource. Default is "*".
                          type: string
                      type: object
                      x-kubernetes-map-type: atomic
                    type: array
                    x-kubernetes-list-type: atomic
                type: object
                x-kubernetes-map-type: atomic
              paramRef:
                description: ParamRef specifies the parameter resource used to configure
                  the admission control policy. It should point to a resource of the
                  type specified in ParamKind of the bound ValidatingAdmissionPolicy.
                  If the policy specifies a ParamKind and the resource referred to
                  by ParamRef does not exist, this binding is considered mis-configured
                  and the FailurePolicy of the ValidatingAdmissionPolicy applied.
                properties:
                  name:
                    description: Name of the resource being referenced.
                    type: string
                  namespace:
                    description: Namespace of the referenced resource. Should be empty
                      for the cluster-scoped resources
                    type: string
                type: object
                x-kubernetes-map-type: atomic
              policyName:
                description: PolicyName references a ValidatingAdmissionPolicy name
                  which the ValidatingAdmissionPolicyBinding binds to. If the referenced
                  resource does not exist, this binding is considered invalid and
                  will be ignored Required.
                type: string
              validationActions:
                description: "validationActions declares how Validations of the referenced
                  ValidatingAdmissionPolicy are enforced. If a validation evaluates
                  to false it is always enforced according to these actions. \n Failures
                  defined by the ValidatingAdmissionPolicy's FailurePolicy are enforced
                  according to these actions only if the FailurePolicy is set to Fail,
                  otherwise the failures are ignored. This includes compilation errors,
                  runtime errors and misconfigurations of the policy. \n validationActions
                  is declared as a set of action values. Order does not matter. validationActions
                  may not contain duplicates of the same action. \n The supported
                  actions values are: \n \"Deny\" specifies that a validation failure
                  results in a denied request. \n \"Warn\" specifies that a validation
                  failure is reported to the request client in HTTP Warning headers,
                  with a warning code of 299. Warnings can be sent both for allowed
                  or denied admission responses. \n \"Audit\" specifies that a validation
                  failure is included in the published audit event for the request.
                  The audit event will contain a `validation.policy.admission.k8s.io/validation_failure`
                  audit annotation with a value containing the details of the validation
                  failures, formatted as a JSON list of objects, each with the following
                  fields: - message: The validation failure message string - policy:
                  The resource name of the ValidatingAdmissionPolicy - binding: The
                  resource name of the ValidatingAdmissionPolicyBinding - expressionIndex:
                  The index of the failed validations in the ValidatingAdmissionPolicy
                  - validationActions: The enforcement actions enacted for the validation
                  failure Example audit annotation: `\"validation.policy.admission.k8s.io/validation_failure\":
                  \"[{\\\"message\\\": \\\"Invalid value\\\", {\\\"policy\\\": \\\"policy.example.com\\\",
                  {\\\"binding\\\": \\\"policybinding.example.com\\\", {\\\"expressionIndex\\\":
                  \\\"1\\\", {\\\"validationActions\\\": [\\\"Audit\\\"]}]\"` \n Clients
                  should expect to handle additional values by ignoring any values
                  not recognized. \n \"Deny\" and \"Warn\" may not be used together
                  since this combination needlessly duplicates the validation failure
                  both in the API response body and the HTTP warning headers. \n Required."
                items:
                  description: ValidationAction specifies a policy enforcement action.
                  type: string
                type: array
                x-kubernetes-list-type: set
            type: object
        type: object
    served: true
    storage: true
